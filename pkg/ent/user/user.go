// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNo holds the string denoting the no field in the database.
	FieldNo = "no"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldPwdHashed holds the string denoting the pwd_hashed field in the database.
	FieldPwdHashed = "pwd_hashed"
	// FieldPwdSalt holds the string denoting the pwd_salt field in the database.
	FieldPwdSalt = "pwd_salt"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldDisableStatus holds the string denoting the disable_status field in the database.
	FieldDisableStatus = "disable_status"
	// FieldCompany holds the string denoting the company field in the database.
	FieldCompany = "company"
	// FieldParentDisableStatus holds the string denoting the parent_disable_status field in the database.
	FieldParentDisableStatus = "parent_disable_status"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// Table holds the table name of the user in the database.
	Table = "users"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "user_roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldNo,
	FieldRole,
	FieldName,
	FieldPhone,
	FieldEmail,
	FieldGender,
	FieldPwdHashed,
	FieldPwdSalt,
	FieldToken,
	FieldDisableStatus,
	FieldCompany,
	FieldParentDisableStatus,
	FieldIcon,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"user_id", "role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultNo holds the default value on creation for the "no" field.
	DefaultNo string
	// RoleValidator is a validator for the "role" field. It is called by the builders before save.
	RoleValidator func(int) error
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultGender holds the default value on creation for the "gender" field.
	DefaultGender int
	// PwdHashedValidator is a validator for the "pwd_hashed" field. It is called by the builders before save.
	PwdHashedValidator func(string) error
	// PwdSaltValidator is a validator for the "pwd_salt" field. It is called by the builders before save.
	PwdSaltValidator func(string) error
	// DefaultToken holds the default value on creation for the "token" field.
	DefaultToken string
	// DefaultDisableStatus holds the default value on creation for the "disable_status" field.
	DefaultDisableStatus int
	// DefaultCompany holds the default value on creation for the "company" field.
	DefaultCompany string
	// DefaultParentDisableStatus holds the default value on creation for the "parent_disable_status" field.
	DefaultParentDisableStatus int
	// DefaultIcon holds the default value on creation for the "icon" field.
	DefaultIcon string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNo orders the results by the no field.
func ByNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNo, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByPwdHashed orders the results by the pwd_hashed field.
func ByPwdHashed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPwdHashed, opts...).ToFunc()
}

// ByPwdSalt orders the results by the pwd_salt field.
func ByPwdSalt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPwdSalt, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByDisableStatus orders the results by the disable_status field.
func ByDisableStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisableStatus, opts...).ToFunc()
}

// ByCompany orders the results by the company field.
func ByCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompany, opts...).ToFunc()
}

// ByParentDisableStatus orders the results by the parent_disable_status field.
func ByParentDisableStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentDisableStatus, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
	)
}
