// Code generated by ent, DO NOT EDIT.

package user

import (
	"auth/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// No applies equality check predicate on the "no" field. It's identical to NoEQ.
func No(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNo, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGender, v))
}

// PwdHashed applies equality check predicate on the "pwd_hashed" field. It's identical to PwdHashedEQ.
func PwdHashed(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPwdHashed, v))
}

// PwdSalt applies equality check predicate on the "pwd_salt" field. It's identical to PwdSaltEQ.
func PwdSalt(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPwdSalt, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldToken, v))
}

// DisableStatus applies equality check predicate on the "disable_status" field. It's identical to DisableStatusEQ.
func DisableStatus(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisableStatus, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCompany, v))
}

// ParentDisableStatus applies equality check predicate on the "parent_disable_status" field. It's identical to ParentDisableStatusEQ.
func ParentDisableStatus(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldParentDisableStatus, v))
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIcon, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// NoEQ applies the EQ predicate on the "no" field.
func NoEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNo, v))
}

// NoNEQ applies the NEQ predicate on the "no" field.
func NoNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNo, v))
}

// NoIn applies the In predicate on the "no" field.
func NoIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNo, vs...))
}

// NoNotIn applies the NotIn predicate on the "no" field.
func NoNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNo, vs...))
}

// NoGT applies the GT predicate on the "no" field.
func NoGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNo, v))
}

// NoGTE applies the GTE predicate on the "no" field.
func NoGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNo, v))
}

// NoLT applies the LT predicate on the "no" field.
func NoLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNo, v))
}

// NoLTE applies the LTE predicate on the "no" field.
func NoLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNo, v))
}

// NoContains applies the Contains predicate on the "no" field.
func NoContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNo, v))
}

// NoHasPrefix applies the HasPrefix predicate on the "no" field.
func NoHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNo, v))
}

// NoHasSuffix applies the HasSuffix predicate on the "no" field.
func NoHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNo, v))
}

// NoEqualFold applies the EqualFold predicate on the "no" field.
func NoEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNo, v))
}

// NoContainsFold applies the ContainsFold predicate on the "no" field.
func NoContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNo, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRole, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGender, v))
}

// PwdHashedEQ applies the EQ predicate on the "pwd_hashed" field.
func PwdHashedEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPwdHashed, v))
}

// PwdHashedNEQ applies the NEQ predicate on the "pwd_hashed" field.
func PwdHashedNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPwdHashed, v))
}

// PwdHashedIn applies the In predicate on the "pwd_hashed" field.
func PwdHashedIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPwdHashed, vs...))
}

// PwdHashedNotIn applies the NotIn predicate on the "pwd_hashed" field.
func PwdHashedNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPwdHashed, vs...))
}

// PwdHashedGT applies the GT predicate on the "pwd_hashed" field.
func PwdHashedGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPwdHashed, v))
}

// PwdHashedGTE applies the GTE predicate on the "pwd_hashed" field.
func PwdHashedGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPwdHashed, v))
}

// PwdHashedLT applies the LT predicate on the "pwd_hashed" field.
func PwdHashedLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPwdHashed, v))
}

// PwdHashedLTE applies the LTE predicate on the "pwd_hashed" field.
func PwdHashedLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPwdHashed, v))
}

// PwdHashedContains applies the Contains predicate on the "pwd_hashed" field.
func PwdHashedContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPwdHashed, v))
}

// PwdHashedHasPrefix applies the HasPrefix predicate on the "pwd_hashed" field.
func PwdHashedHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPwdHashed, v))
}

// PwdHashedHasSuffix applies the HasSuffix predicate on the "pwd_hashed" field.
func PwdHashedHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPwdHashed, v))
}

// PwdHashedEqualFold applies the EqualFold predicate on the "pwd_hashed" field.
func PwdHashedEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPwdHashed, v))
}

// PwdHashedContainsFold applies the ContainsFold predicate on the "pwd_hashed" field.
func PwdHashedContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPwdHashed, v))
}

// PwdSaltEQ applies the EQ predicate on the "pwd_salt" field.
func PwdSaltEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPwdSalt, v))
}

// PwdSaltNEQ applies the NEQ predicate on the "pwd_salt" field.
func PwdSaltNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPwdSalt, v))
}

// PwdSaltIn applies the In predicate on the "pwd_salt" field.
func PwdSaltIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPwdSalt, vs...))
}

// PwdSaltNotIn applies the NotIn predicate on the "pwd_salt" field.
func PwdSaltNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPwdSalt, vs...))
}

// PwdSaltGT applies the GT predicate on the "pwd_salt" field.
func PwdSaltGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPwdSalt, v))
}

// PwdSaltGTE applies the GTE predicate on the "pwd_salt" field.
func PwdSaltGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPwdSalt, v))
}

// PwdSaltLT applies the LT predicate on the "pwd_salt" field.
func PwdSaltLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPwdSalt, v))
}

// PwdSaltLTE applies the LTE predicate on the "pwd_salt" field.
func PwdSaltLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPwdSalt, v))
}

// PwdSaltContains applies the Contains predicate on the "pwd_salt" field.
func PwdSaltContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPwdSalt, v))
}

// PwdSaltHasPrefix applies the HasPrefix predicate on the "pwd_salt" field.
func PwdSaltHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPwdSalt, v))
}

// PwdSaltHasSuffix applies the HasSuffix predicate on the "pwd_salt" field.
func PwdSaltHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPwdSalt, v))
}

// PwdSaltEqualFold applies the EqualFold predicate on the "pwd_salt" field.
func PwdSaltEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPwdSalt, v))
}

// PwdSaltContainsFold applies the ContainsFold predicate on the "pwd_salt" field.
func PwdSaltContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPwdSalt, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldToken, v))
}

// DisableStatusEQ applies the EQ predicate on the "disable_status" field.
func DisableStatusEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisableStatus, v))
}

// DisableStatusNEQ applies the NEQ predicate on the "disable_status" field.
func DisableStatusNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDisableStatus, v))
}

// DisableStatusIn applies the In predicate on the "disable_status" field.
func DisableStatusIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldDisableStatus, vs...))
}

// DisableStatusNotIn applies the NotIn predicate on the "disable_status" field.
func DisableStatusNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDisableStatus, vs...))
}

// DisableStatusGT applies the GT predicate on the "disable_status" field.
func DisableStatusGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldDisableStatus, v))
}

// DisableStatusGTE applies the GTE predicate on the "disable_status" field.
func DisableStatusGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDisableStatus, v))
}

// DisableStatusLT applies the LT predicate on the "disable_status" field.
func DisableStatusLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldDisableStatus, v))
}

// DisableStatusLTE applies the LTE predicate on the "disable_status" field.
func DisableStatusLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDisableStatus, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCompany, v))
}

// ParentDisableStatusEQ applies the EQ predicate on the "parent_disable_status" field.
func ParentDisableStatusEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldParentDisableStatus, v))
}

// ParentDisableStatusNEQ applies the NEQ predicate on the "parent_disable_status" field.
func ParentDisableStatusNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldParentDisableStatus, v))
}

// ParentDisableStatusIn applies the In predicate on the "parent_disable_status" field.
func ParentDisableStatusIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldParentDisableStatus, vs...))
}

// ParentDisableStatusNotIn applies the NotIn predicate on the "parent_disable_status" field.
func ParentDisableStatusNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldParentDisableStatus, vs...))
}

// ParentDisableStatusGT applies the GT predicate on the "parent_disable_status" field.
func ParentDisableStatusGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldParentDisableStatus, v))
}

// ParentDisableStatusGTE applies the GTE predicate on the "parent_disable_status" field.
func ParentDisableStatusGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldParentDisableStatus, v))
}

// ParentDisableStatusLT applies the LT predicate on the "parent_disable_status" field.
func ParentDisableStatusLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldParentDisableStatus, v))
}

// ParentDisableStatusLTE applies the LTE predicate on the "parent_disable_status" field.
func ParentDisableStatusLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldParentDisableStatus, v))
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIcon, v))
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIcon, v))
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldIcon, vs...))
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIcon, vs...))
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldIcon, v))
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIcon, v))
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldIcon, v))
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIcon, v))
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldIcon, v))
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldIcon, v))
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldIcon, v))
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldIcon, v))
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldIcon, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
