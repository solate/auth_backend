// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auth/pkg/ent/role"
	"auth/pkg/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNo sets the "no" field.
func (uc *UserCreate) SetNo(s string) *UserCreate {
	uc.mutation.SetNo(s)
	return uc
}

// SetNillableNo sets the "no" field if the given value is not nil.
func (uc *UserCreate) SetNillableNo(s *string) *UserCreate {
	if s != nil {
		uc.SetNo(*s)
	}
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(i int) *UserCreate {
	uc.mutation.SetRole(i)
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uc *UserCreate) SetNillableName(s *string) *UserCreate {
	if s != nil {
		uc.SetName(*s)
	}
	return uc
}

// SetPhone sets the "phone" field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhone(s *string) *UserCreate {
	if s != nil {
		uc.SetPhone(*s)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetEmail(*s)
	}
	return uc
}

// SetGender sets the "gender" field.
func (uc *UserCreate) SetGender(i int) *UserCreate {
	uc.mutation.SetGender(i)
	return uc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (uc *UserCreate) SetNillableGender(i *int) *UserCreate {
	if i != nil {
		uc.SetGender(*i)
	}
	return uc
}

// SetPwdHashed sets the "pwd_hashed" field.
func (uc *UserCreate) SetPwdHashed(s string) *UserCreate {
	uc.mutation.SetPwdHashed(s)
	return uc
}

// SetPwdSalt sets the "pwd_salt" field.
func (uc *UserCreate) SetPwdSalt(s string) *UserCreate {
	uc.mutation.SetPwdSalt(s)
	return uc
}

// SetToken sets the "token" field.
func (uc *UserCreate) SetToken(s string) *UserCreate {
	uc.mutation.SetToken(s)
	return uc
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (uc *UserCreate) SetNillableToken(s *string) *UserCreate {
	if s != nil {
		uc.SetToken(*s)
	}
	return uc
}

// SetDisableStatus sets the "disable_status" field.
func (uc *UserCreate) SetDisableStatus(i int) *UserCreate {
	uc.mutation.SetDisableStatus(i)
	return uc
}

// SetNillableDisableStatus sets the "disable_status" field if the given value is not nil.
func (uc *UserCreate) SetNillableDisableStatus(i *int) *UserCreate {
	if i != nil {
		uc.SetDisableStatus(*i)
	}
	return uc
}

// SetCompany sets the "company" field.
func (uc *UserCreate) SetCompany(s string) *UserCreate {
	uc.mutation.SetCompany(s)
	return uc
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (uc *UserCreate) SetNillableCompany(s *string) *UserCreate {
	if s != nil {
		uc.SetCompany(*s)
	}
	return uc
}

// SetParentDisableStatus sets the "parent_disable_status" field.
func (uc *UserCreate) SetParentDisableStatus(i int) *UserCreate {
	uc.mutation.SetParentDisableStatus(i)
	return uc
}

// SetNillableParentDisableStatus sets the "parent_disable_status" field if the given value is not nil.
func (uc *UserCreate) SetNillableParentDisableStatus(i *int) *UserCreate {
	if i != nil {
		uc.SetParentDisableStatus(*i)
	}
	return uc
}

// SetIcon sets the "icon" field.
func (uc *UserCreate) SetIcon(s string) *UserCreate {
	uc.mutation.SetIcon(s)
	return uc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (uc *UserCreate) SetNillableIcon(s *string) *UserCreate {
	if s != nil {
		uc.SetIcon(*s)
	}
	return uc
}

// SetStatus sets the "status" field.
func (uc *UserCreate) SetStatus(i int) *UserCreate {
	uc.mutation.SetStatus(i)
	return uc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uc *UserCreate) SetNillableStatus(i *int) *UserCreate {
	if i != nil {
		uc.SetStatus(*i)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (uc *UserCreate) AddRoleIDs(ids ...int) *UserCreate {
	uc.mutation.AddRoleIDs(ids...)
	return uc
}

// AddRoles adds the "roles" edges to the Role entity.
func (uc *UserCreate) AddRoles(r ...*Role) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRoleIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.No(); !ok {
		v := user.DefaultNo
		uc.mutation.SetNo(v)
	}
	if _, ok := uc.mutation.Name(); !ok {
		v := user.DefaultName
		uc.mutation.SetName(v)
	}
	if _, ok := uc.mutation.Phone(); !ok {
		v := user.DefaultPhone
		uc.mutation.SetPhone(v)
	}
	if _, ok := uc.mutation.Email(); !ok {
		v := user.DefaultEmail
		uc.mutation.SetEmail(v)
	}
	if _, ok := uc.mutation.Gender(); !ok {
		v := user.DefaultGender
		uc.mutation.SetGender(v)
	}
	if _, ok := uc.mutation.Token(); !ok {
		v := user.DefaultToken
		uc.mutation.SetToken(v)
	}
	if _, ok := uc.mutation.DisableStatus(); !ok {
		v := user.DefaultDisableStatus
		uc.mutation.SetDisableStatus(v)
	}
	if _, ok := uc.mutation.Company(); !ok {
		v := user.DefaultCompany
		uc.mutation.SetCompany(v)
	}
	if _, ok := uc.mutation.ParentDisableStatus(); !ok {
		v := user.DefaultParentDisableStatus
		uc.mutation.SetParentDisableStatus(v)
	}
	if _, ok := uc.mutation.Icon(); !ok {
		v := user.DefaultIcon
		uc.mutation.SetIcon(v)
	}
	if _, ok := uc.mutation.Status(); !ok {
		v := user.DefaultStatus
		uc.mutation.SetStatus(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.No(); !ok {
		return &ValidationError{Name: "no", err: errors.New(`ent: missing required field "User.no"`)}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if v, ok := uc.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "User.phone"`)}
	}
	if v, ok := uc.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "User.gender"`)}
	}
	if _, ok := uc.mutation.PwdHashed(); !ok {
		return &ValidationError{Name: "pwd_hashed", err: errors.New(`ent: missing required field "User.pwd_hashed"`)}
	}
	if v, ok := uc.mutation.PwdHashed(); ok {
		if err := user.PwdHashedValidator(v); err != nil {
			return &ValidationError{Name: "pwd_hashed", err: fmt.Errorf(`ent: validator failed for field "User.pwd_hashed": %w`, err)}
		}
	}
	if _, ok := uc.mutation.PwdSalt(); !ok {
		return &ValidationError{Name: "pwd_salt", err: errors.New(`ent: missing required field "User.pwd_salt"`)}
	}
	if v, ok := uc.mutation.PwdSalt(); ok {
		if err := user.PwdSaltValidator(v); err != nil {
			return &ValidationError{Name: "pwd_salt", err: fmt.Errorf(`ent: validator failed for field "User.pwd_salt": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "User.token"`)}
	}
	if _, ok := uc.mutation.DisableStatus(); !ok {
		return &ValidationError{Name: "disable_status", err: errors.New(`ent: missing required field "User.disable_status"`)}
	}
	if _, ok := uc.mutation.Company(); !ok {
		return &ValidationError{Name: "company", err: errors.New(`ent: missing required field "User.company"`)}
	}
	if _, ok := uc.mutation.ParentDisableStatus(); !ok {
		return &ValidationError{Name: "parent_disable_status", err: errors.New(`ent: missing required field "User.parent_disable_status"`)}
	}
	if _, ok := uc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "User.icon"`)}
	}
	if _, ok := uc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "User.status"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.No(); ok {
		_spec.SetField(user.FieldNo, field.TypeString, value)
		_node.No = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeInt, value)
		_node.Role = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt, value)
		_node.Gender = value
	}
	if value, ok := uc.mutation.PwdHashed(); ok {
		_spec.SetField(user.FieldPwdHashed, field.TypeString, value)
		_node.PwdHashed = value
	}
	if value, ok := uc.mutation.PwdSalt(); ok {
		_spec.SetField(user.FieldPwdSalt, field.TypeString, value)
		_node.PwdSalt = value
	}
	if value, ok := uc.mutation.Token(); ok {
		_spec.SetField(user.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := uc.mutation.DisableStatus(); ok {
		_spec.SetField(user.FieldDisableStatus, field.TypeInt, value)
		_node.DisableStatus = value
	}
	if value, ok := uc.mutation.Company(); ok {
		_spec.SetField(user.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := uc.mutation.ParentDisableStatus(); ok {
		_spec.SetField(user.FieldParentDisableStatus, field.TypeInt, value)
		_node.ParentDisableStatus = value
	}
	if value, ok := uc.mutation.Icon(); ok {
		_spec.SetField(user.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetNo(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetNo(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetNo sets the "no" field.
func (u *UserUpsert) SetNo(v string) *UserUpsert {
	u.Set(user.FieldNo, v)
	return u
}

// UpdateNo sets the "no" field to the value that was provided on create.
func (u *UserUpsert) UpdateNo() *UserUpsert {
	u.SetExcluded(user.FieldNo)
	return u
}

// SetRole sets the "role" field.
func (u *UserUpsert) SetRole(v int) *UserUpsert {
	u.Set(user.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsert) UpdateRole() *UserUpsert {
	u.SetExcluded(user.FieldRole)
	return u
}

// AddRole adds v to the "role" field.
func (u *UserUpsert) AddRole(v int) *UserUpsert {
	u.Add(user.FieldRole, v)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// SetPhone sets the "phone" field.
func (u *UserUpsert) SetPhone(v string) *UserUpsert {
	u.Set(user.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhone() *UserUpsert {
	u.SetExcluded(user.FieldPhone)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetGender sets the "gender" field.
func (u *UserUpsert) SetGender(v int) *UserUpsert {
	u.Set(user.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsert) UpdateGender() *UserUpsert {
	u.SetExcluded(user.FieldGender)
	return u
}

// AddGender adds v to the "gender" field.
func (u *UserUpsert) AddGender(v int) *UserUpsert {
	u.Add(user.FieldGender, v)
	return u
}

// SetPwdHashed sets the "pwd_hashed" field.
func (u *UserUpsert) SetPwdHashed(v string) *UserUpsert {
	u.Set(user.FieldPwdHashed, v)
	return u
}

// UpdatePwdHashed sets the "pwd_hashed" field to the value that was provided on create.
func (u *UserUpsert) UpdatePwdHashed() *UserUpsert {
	u.SetExcluded(user.FieldPwdHashed)
	return u
}

// SetPwdSalt sets the "pwd_salt" field.
func (u *UserUpsert) SetPwdSalt(v string) *UserUpsert {
	u.Set(user.FieldPwdSalt, v)
	return u
}

// UpdatePwdSalt sets the "pwd_salt" field to the value that was provided on create.
func (u *UserUpsert) UpdatePwdSalt() *UserUpsert {
	u.SetExcluded(user.FieldPwdSalt)
	return u
}

// SetToken sets the "token" field.
func (u *UserUpsert) SetToken(v string) *UserUpsert {
	u.Set(user.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *UserUpsert) UpdateToken() *UserUpsert {
	u.SetExcluded(user.FieldToken)
	return u
}

// SetDisableStatus sets the "disable_status" field.
func (u *UserUpsert) SetDisableStatus(v int) *UserUpsert {
	u.Set(user.FieldDisableStatus, v)
	return u
}

// UpdateDisableStatus sets the "disable_status" field to the value that was provided on create.
func (u *UserUpsert) UpdateDisableStatus() *UserUpsert {
	u.SetExcluded(user.FieldDisableStatus)
	return u
}

// AddDisableStatus adds v to the "disable_status" field.
func (u *UserUpsert) AddDisableStatus(v int) *UserUpsert {
	u.Add(user.FieldDisableStatus, v)
	return u
}

// SetCompany sets the "company" field.
func (u *UserUpsert) SetCompany(v string) *UserUpsert {
	u.Set(user.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserUpsert) UpdateCompany() *UserUpsert {
	u.SetExcluded(user.FieldCompany)
	return u
}

// SetParentDisableStatus sets the "parent_disable_status" field.
func (u *UserUpsert) SetParentDisableStatus(v int) *UserUpsert {
	u.Set(user.FieldParentDisableStatus, v)
	return u
}

// UpdateParentDisableStatus sets the "parent_disable_status" field to the value that was provided on create.
func (u *UserUpsert) UpdateParentDisableStatus() *UserUpsert {
	u.SetExcluded(user.FieldParentDisableStatus)
	return u
}

// AddParentDisableStatus adds v to the "parent_disable_status" field.
func (u *UserUpsert) AddParentDisableStatus(v int) *UserUpsert {
	u.Add(user.FieldParentDisableStatus, v)
	return u
}

// SetIcon sets the "icon" field.
func (u *UserUpsert) SetIcon(v string) *UserUpsert {
	u.Set(user.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *UserUpsert) UpdateIcon() *UserUpsert {
	u.SetExcluded(user.FieldIcon)
	return u
}

// SetStatus sets the "status" field.
func (u *UserUpsert) SetStatus(v int) *UserUpsert {
	u.Set(user.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsert) UpdateStatus() *UserUpsert {
	u.SetExcluded(user.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *UserUpsert) AddStatus(v int) *UserUpsert {
	u.Add(user.FieldStatus, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsert) SetCreatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreatedAt() *UserUpsert {
	u.SetExcluded(user.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetNo sets the "no" field.
func (u *UserUpsertOne) SetNo(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNo(v)
	})
}

// UpdateNo sets the "no" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNo() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNo()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertOne) SetRole(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// AddRole adds v to the "role" field.
func (u *UserUpsertOne) AddRole(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRole() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertOne) SetPhone(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetGender sets the "gender" field.
func (u *UserUpsertOne) SetGender(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *UserUpsertOne) AddGender(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateGender() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGender()
	})
}

// SetPwdHashed sets the "pwd_hashed" field.
func (u *UserUpsertOne) SetPwdHashed(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPwdHashed(v)
	})
}

// UpdatePwdHashed sets the "pwd_hashed" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePwdHashed() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePwdHashed()
	})
}

// SetPwdSalt sets the "pwd_salt" field.
func (u *UserUpsertOne) SetPwdSalt(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPwdSalt(v)
	})
}

// UpdatePwdSalt sets the "pwd_salt" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePwdSalt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePwdSalt()
	})
}

// SetToken sets the "token" field.
func (u *UserUpsertOne) SetToken(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateToken() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateToken()
	})
}

// SetDisableStatus sets the "disable_status" field.
func (u *UserUpsertOne) SetDisableStatus(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDisableStatus(v)
	})
}

// AddDisableStatus adds v to the "disable_status" field.
func (u *UserUpsertOne) AddDisableStatus(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddDisableStatus(v)
	})
}

// UpdateDisableStatus sets the "disable_status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDisableStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisableStatus()
	})
}

// SetCompany sets the "company" field.
func (u *UserUpsertOne) SetCompany(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCompany() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCompany()
	})
}

// SetParentDisableStatus sets the "parent_disable_status" field.
func (u *UserUpsertOne) SetParentDisableStatus(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetParentDisableStatus(v)
	})
}

// AddParentDisableStatus adds v to the "parent_disable_status" field.
func (u *UserUpsertOne) AddParentDisableStatus(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddParentDisableStatus(v)
	})
}

// UpdateParentDisableStatus sets the "parent_disable_status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateParentDisableStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateParentDisableStatus()
	})
}

// SetIcon sets the "icon" field.
func (u *UserUpsertOne) SetIcon(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIcon() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIcon()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertOne) SetStatus(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserUpsertOne) AddStatus(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertOne) SetCreatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetNo(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetNo sets the "no" field.
func (u *UserUpsertBulk) SetNo(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNo(v)
	})
}

// UpdateNo sets the "no" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNo() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNo()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertBulk) SetRole(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// AddRole adds v to the "role" field.
func (u *UserUpsertBulk) AddRole(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRole() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertBulk) SetPhone(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetGender sets the "gender" field.
func (u *UserUpsertBulk) SetGender(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *UserUpsertBulk) AddGender(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateGender() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGender()
	})
}

// SetPwdHashed sets the "pwd_hashed" field.
func (u *UserUpsertBulk) SetPwdHashed(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPwdHashed(v)
	})
}

// UpdatePwdHashed sets the "pwd_hashed" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePwdHashed() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePwdHashed()
	})
}

// SetPwdSalt sets the "pwd_salt" field.
func (u *UserUpsertBulk) SetPwdSalt(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPwdSalt(v)
	})
}

// UpdatePwdSalt sets the "pwd_salt" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePwdSalt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePwdSalt()
	})
}

// SetToken sets the "token" field.
func (u *UserUpsertBulk) SetToken(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateToken() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateToken()
	})
}

// SetDisableStatus sets the "disable_status" field.
func (u *UserUpsertBulk) SetDisableStatus(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDisableStatus(v)
	})
}

// AddDisableStatus adds v to the "disable_status" field.
func (u *UserUpsertBulk) AddDisableStatus(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddDisableStatus(v)
	})
}

// UpdateDisableStatus sets the "disable_status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDisableStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisableStatus()
	})
}

// SetCompany sets the "company" field.
func (u *UserUpsertBulk) SetCompany(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCompany() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCompany()
	})
}

// SetParentDisableStatus sets the "parent_disable_status" field.
func (u *UserUpsertBulk) SetParentDisableStatus(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetParentDisableStatus(v)
	})
}

// AddParentDisableStatus adds v to the "parent_disable_status" field.
func (u *UserUpsertBulk) AddParentDisableStatus(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddParentDisableStatus(v)
	})
}

// UpdateParentDisableStatus sets the "parent_disable_status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateParentDisableStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateParentDisableStatus()
	})
}

// SetIcon sets the "icon" field.
func (u *UserUpsertBulk) SetIcon(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIcon() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIcon()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertBulk) SetStatus(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserUpsertBulk) AddStatus(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertBulk) SetCreatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
